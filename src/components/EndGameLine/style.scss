@use "sass:math";
@use "../../global.scss";

$boardDiagonalSize: calc(math.sqrt(2) * global.$boardSize);

@keyframes diagonal {
   0% {
      width: 0px;
      opacity: 0;
   } 20% {
      opacity: 1;
   }
   100% { 
      width: $boardDiagonalSize;
   }
}
@keyframes horizontal {
   0% {
      width: 0px;
      opacity: 0;
   } 20% {
      opacity: 1;
   }
   100% { 
      width: global.$boardSize;
   }
}
@keyframes vertical {
   0% {
      height: 0px;
      opacity: 0;
   } 20% {
      opacity: 1;
   } 100% { 
      height: global.$boardSize;
   }
}

@mixin animate($type) {
   @if $type == "diagonal" {
      animation: diagonal 1.5s ease-in-out running;
   } @else if $type == "horizontal" {
      animation: horizontal 1.5s ease-in-out running;
   } @else if $type == "vertical" {
      animation: vertical 1.5s ease-in-out running;
   }
}

#endGameLineWrapper {
   position: relative;

   #endGameLine {
      content: "";
      position: absolute;
      border: global.$endGameLineStroke solid;
      border-radius: global.$endGameLineStroke;
      transform-origin: 0% 0%;
      &.red {
         border-color: global.$xColor;
         background-color: global.$xColor;
         box-shadow: 0px 0px 5px global.$xColor;
      }
      
      &.blue {
         border-color: global.$oColor;
         background-color: global.$oColor;
         box-shadow: 0px 0px 5px global.$oColor;
      }
   }
}

.diagonalCross {
   left: global.$endGameLineStroke;
   top: -2.5px;
   & > #endGameLine {
      width: $boardDiagonalSize;
      transform: rotate(45deg);
      @include animate("diagonal");
   }
}
.diagonalBottomCross {
   left: - global.$endGameLineStroke;
   top: global.$boardSize - 2.5px;

   & > #endGameLine {
      width: $boardDiagonalSize;
      transform: rotate(-45deg);
      @include animate("diagonal");
   }
}

.diagonalLeftCross {
   top: 2px;
   left: global.$boardSize + 5px;

   & > #endGameLine {
      width: $boardDiagonalSize;
      transform: rotate(135deg);
      @include animate("diagonal");
   }
}
.diagonalLeftBottomCross {
   left: global.$boardSize - 5px;
   top: global.$boardSize + 2px;

   & > #endGameLine {
      width: $boardDiagonalSize;
      transform: rotate(-135deg);
      @include animate("diagonal");
   }
}

.horizontalCross {
   // bottom: global.$endGameLineStroke;
   & > #endGameLine {
      width: global.$boardSize;
      @include animate("horizontal");
   }
}

.horizontalLeftCross {
   // bottom: global.$endGameLineStroke;
   transform: scaleX(-1);
   & > #endGameLine {
      width: global.$boardSize;
      @include animate("horizontal");
   }
}

.verticalCross {
   right: global.$endGameLineStroke;

   & > #endGameLine {
      height: global.$boardSize;
      @include animate("vertical");
   }
}

.verticalBottomCross {
   right: global.$endGameLineStroke;
   transform: scaleY(-1);
   top: global.$boardSize;

   & > #endGameLine {
      height: global.$boardSize;
      @include animate("vertical");
   }
}

@mixin offset($property, $square) {
   #{$property}: calc(global.$squareSize * $square) + calc(global.$squareSize / 2);
}
 

.offsetX0 {
   @include offset(left, 0)
}
.offsetX1 {
   @include offset(left, 1)
}
.offsetX2 {
   @include offset(left, 2)
}

.offsetY0 {
   @include offset(top, 0)
}
.offsetY1 {
   @include offset(top, 1)
}
.offsetY2 {
   @include offset(top, 2)
}